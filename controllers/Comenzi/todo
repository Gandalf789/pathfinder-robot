1.When a prox sensor detects something on
the left side it is going to activate the go_left()
function, instead of going far from the obstacle

2.We must try to make the detection of the obstacles by sensors on that part so that we
know in which part should we steer an in which not to

It takes 3.34 rad for the epuck to make a 180 degrees turn
approx 6.9 for a 360

the follow_left() system should do only one movement action at a time (ex: go_forward, go_left, etc.)


makin a struct to represent different types of walls




hell yeah bby we have gps

so, Im thhinking we should go more old school and not use a gps, and instead use
a pen to draw where the robot has been, and try to follow that line with a distance sensor
below the robot.

I think it is better if we would do a a system of only two cases : (0 1)
                                                                    0 1

So I think our best shot at completing a maze is by wall following.
By wall following you will gennerally have two routes that get you to the finish(the left or the right wall)
So we'll need to make the robot recognize when arun has ended and another one has begun, so that
at the end it can tell what was the shourtest route

Yooo deci

it follows the wall on the left side and then when it arives on


//        if(front_wall == true){
              printf("%s<%d%s\n", ANSI_BOLD, ANSI_CLEAR_CONSOLE(), ANSI_RESET);
              left_speed = MAX_SPEED;
              right_speed = -MAX_SPEED;
          }
          else{
              if(left_wall == true){
                  printf("%s^%d%s\n", ANSI_BOLD, ANSI_CLEAR_CONSOLE(), ANSI_RESET);
                 left_speed = MAX_SPEED;
                 right_speed = MAX_SPEED;
              }
              else{
                  printf("%s<<<%d%s\n", ANSI_BOLD, ANSI_CLEAR_CONSOLE(), ANSI_RESET);
                  left_speed = MAX_SPEED/8;
                  right_speed = MAX_SPEED;
              }
              if(left_corner == true){
                  printf("%s>>>%d%s\n", ANSI_BOLD, ANSI_CLEAR_CONSOLE(), ANSI_RESET);
                  left_speed = MAX_SPEED;
                  right_speed = MAX_SPEED/8;
              }

          }


we must do something to reset the distance counter once it hits the black
square
 make odometry private





double *dist_calc(WbDeviceTag line_sensor, int threshold, WbDeviceTag left_pos_sensor, WbDeviceTag right_pos_sensor){
    double distance = odometry(left_pos_sensor, right_pos_sensor);
    double ir_value = wb_distance_sensor_get_value(line_sensor);
    int elapsed_time = 0;
    static double distArray[3] = {0};// stores the distances of every path
    static int i = 0;
    if(ir_value > threshold && ir_value != 1000){

        /*The following block deactivates the IR sensor for a certain amount of
         * time*/
        while(elapsed_time < 160){
            wb_robot_step(TIME_STEP);
            elapsed_time += TIME_STEP;
            deact_ir();
        }
        wb_distance_sensor_enable(line_sensor, TIME_STEP);
        /*End of the block*/

        i++;// Counts the amounts of time it has scanned a black band

        switch (i) {
            case 1:
                distArray[0] = distance;
                break;
            case 2:
                distArray[1] = distance - distArray[0];
                break;
            default:
                break;
        }
        if(i >= 3){//if the counter is more than 3 that usually means that both walls have been measured and the fastest way has been browsed
            distArray[2] = 1;
        }
    }
    return distArray;
}